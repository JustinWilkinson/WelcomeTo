@page "/WaitingRoom/{GameId}"

@inject IBlazorTimer Timer
@inject IHttpService Http
@inject GameStorage Storage
@inject NavigationManager NavigationManager
@inject GameHubCommunicator GameHub

<h3>Waiting Room</h3>
@if (_game == null)
{
    if (_urlWrong)
    {
        <p>Sorry, it doesn't look like this is a valid game - please make sure your URL is correct and retry.</p>
    }
    else
    {
        <p><em>Loading...</em></p>
    }
}
else if (_kicked)
{
    <p>You have been kicked by the host, and will be redirected in 5 seconds.</p>
}
else if (_game.StartedAtUtc.HasValue)
{
    <p>Sorry, this game has been started by the host! <a href="" @onclick="HostNewGame">Click here to host a new game</a></p>
}
else
{
    <p>Distribute this URL to any players. You can edit your player name using the input box in the table.</p>
    <div class="row w-100 pl-3">
        <table class="table table-striped table-bordered col-4">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Player Name</th>
                    @if (_player.IsHost)
                    {
                        <th>Kick</th>
                    }
                </tr>
            </thead>
            <tbody>
                @for (var i = 0; i < _game.Players.Count; i++)
                {
                    var playerName = _game.Players[i].Name;
                    <tr>
                        <td class="align-middle">@(i + 1)</td>
                        <td>
                            <input class="form-control" type="text" value="@playerName" disabled="@(playerName != _player.Name)" @onchange="e => ChangeNameAsync(e.Value.ToString())" />
                            @if (playerName == _player.Name && _newNameValidationMessage != null)
                            {
                                <label class="text-danger ml-2">@_newNameValidationMessage</label>
                            }
                        </td>
                        @if (_player.IsHost)
                        {
                            <td>
                                @if (!_game.Players[i].IsHost)
                                {
                                    <button class="btn btn-danger ml-2" @onclick="() => KickPlayerAsync(playerName)">Kick</button>
                                }
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="row w-100 pl-3">
        @if (_player.IsHost)
        {
            <button class="btn btn-success" disabled="@(_game.Players.Count < 1)" @onclick="StartGameAsync">Start Game</button>
        }
        else
        {
            <span>Waiting for host to start game...</span>
        }
    </div>
}

@code {
    [Parameter]
    public string GameId { get; set; }

    private Game _game;
    private Player _player;
    private string _newNameValidationMessage;
    private bool _urlWrong;
    private bool _kicked;

    protected override async Task OnInitializedAsync()
    {
        if (Storage.GameId != GameId)
        {
            Storage.GameId = GameId;
            Storage.PlayerName = null;
        }

        _game = await Http.GetAsync<Game>($"api/Game/Get?id={GameId}");
        if (_game != null)
        {
            var playerName = Storage.PlayerName;
            if (_game.StartedAtUtc.HasValue)
            {
                if (playerName != null && _game.Players.SingleOrDefault(p => p.Name == playerName) != null)
                {
                    NavigationManager.NavigateTo($"PlayGame/{GameId}");
                }
                else
                {
                    return;
                }
            }
            else
            {
                await ConfigureHubAsync();
                if (playerName == null)
                {
                    await JoinGameAsync();
                }
                else
                {
                    _player = _game.Players.SingleOrDefault(p => p.Name == playerName);
                    if (_player == null)
                    {
                        Storage.PlayerName = null;
                        await JoinGameAsync();
                    }
                }

                Storage.PlayerName = _player.Name;
            }
        }
        else
        {
            _urlWrong = true;
        }
    }

    private async Task ConfigureHubAsync()
    {
        GameHub.RegisterHandler("UpdateGame", async () =>
        {
            _game = await Http.GetAsync<Game>($"api/Game/Get?id={GameId}");
            if (_game.StartedAtUtc.HasValue)
            {
                NavigationManager.NavigateTo($"PlayGame/{GameId}");
            }
            else
            {
                if (!_game.Players.Any(p => p.Name == Storage.PlayerName))
                {
                    _kicked = true;
                    Timer.SetTimer(5000);
                    Timer.OnElapsed += () => NavigationManager.NavigateTo("");
                }
                StateHasChanged();
            }
        });

        await GameHub.StartAsync();
        await GameHub.AddToGroupAsync(GameId);
    }

    private async Task JoinGameAsync()
    {
        _player = await Http.PostAsync<Player>($"api/Game/Join", GameId);
        _game.Players.Add(_player);
        await GameHub.UpdateGameAsync(GameId);
    }

    private async Task ChangeNameAsync(string newName)
    {
        if (_player.Name != newName)
        {
            if (string.IsNullOrWhiteSpace(newName))
            {
                _newNameValidationMessage = "Please enter a non-empty name!";
            }
            else if (_game.Players.Any(x => x.Name == newName))
            {
                _newNameValidationMessage = "A player with that name already exists in this game!";
            }
            else
            {
                await Http.PostAsync("api/Game/UpdatePlayerName", new { GameId = GameId, OldName = _player.Name, NewName = newName });
                await GameHub.UpdateGameAsync(GameId);
                _player.Name = newName;
                Storage.PlayerName = _player.Name;
                _newNameValidationMessage = null;
            }
        }
    }

    private async Task StartGameAsync()
    {
        await Http.PostAsync("api/Game/Start", GameId);
        await GameHub.UpdateGameAsync(GameId);
        NavigationManager.NavigateTo($"PlayGame/{GameId}");
    }

    private void HostNewGame() => NavigationManager.NavigateTo("NewGame");

    private async Task KickPlayerAsync(string playerName)
    {
        _game = await Http.PostAsync<Game>("api/Game/RemovePlayer", new { GameId = GameId, KickedPlayerName = playerName });
        await GameHub.UpdateGameAsync(GameId);
    }
}