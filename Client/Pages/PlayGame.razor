@page "/PlayGame/{GameId}"

@inject IHttpService Http
@inject GameStorage Storage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject GameHubCommunicator GameHub

@if (Game == null)
{
    if (_urlWrong)
    {
        <p>Sorry, it doesn't look like this is a valid game - please make sure your URL is correct and retry.</p>
    }
    else
    {
        <p><em>Loading...</em></p>
    }
}
else if (IdentifiedPlayer == null)
{
    <p>Sorry, it doesn't look like you're part of this game. <NavLink href="NewGame" Match="NavLinkMatch.All">Click here to host a new game</NavLink></p>
}
else
{
    <Modal Show="_showGameOverMessage" Header="Game Over!" CanClose="true">
        <div class="text-center">
            @Game.CompletedMessage
        </div>
        <div class="text-center font-weight-bold">
            @Game.WinnerText
        </div>
        <div class="row">
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Score</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var player in Game.Players.OrderByDescending(p => Game.GetPointsTotal(p)).ThenBy(p => p.Name))
                    {
                        <tr>
                            <td>@player.Name</td>
                            <td>@Game.GetPointsTotal(player)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </Modal>
    <Modal Show="_showWaitingMessage" Header="Waiting for next turn..." CanClose="true">
        Waiting for @string.Join(", ", Game.Players.Select(x => x.Name).Except(Game.CurrentTurn.PlayerNamesWithActionTaken)) to take their turn...
    </Modal>
    <CascadingValue Value="Game">
        <div class="row mb-4">
            <div class="col-12 col-md-8">
                <div class="row">
                    <div class="col border border-secondary p-0 mx-3 pointer @BlurredClass(DeckIndex.Option1)" title="Option 1" @onclick="() => SelectNumberEffectPair(DeckIndex.Option1)">
                        <CardPair Index="1" HouseNumberCard="Game.CurrentTurn.HouseNumberCard1" EffectCard="Game.CurrentTurn.EffectCard1" />
                    </div>
                    <div class="col border border-secondary p-0 mx-3 pointer @BlurredClass(DeckIndex.Option2)" title="Option 2" @onclick="() => SelectNumberEffectPair(DeckIndex.Option2)">
                        <CardPair Index="2" HouseNumberCard="Game.CurrentTurn.HouseNumberCard2" EffectCard="Game.CurrentTurn.EffectCard2" />
                    </div>
                    <div class="col border border-secondary p-0 mx-3 pointer @BlurredClass(DeckIndex.Option3)" title="Option 3" @onclick="() => SelectNumberEffectPair(DeckIndex.Option3)">
                        <CardPair Index="3" HouseNumberCard="Game.CurrentTurn.HouseNumberCard3" EffectCard="Game.CurrentTurn.EffectCard3" />
                    </div>
                </div>
            </div>
            <div class="col-8 col-md-4 mx-auto mx=md-0 mt-2 mt-md-0">
                <div class="row h-100" title="City Plans">
                    <CityPlanCard CityPlan="Game.Plans.Plan1" IdentifiedPlayer="IdentifiedPlayer" OnCompleted="PlayerCompletedCityPlanAsync" />
                    <CityPlanCard CityPlan="Game.Plans.Plan2" IdentifiedPlayer="IdentifiedPlayer" OnCompleted="PlayerCompletedCityPlanAsync" />
                    <CityPlanCard CityPlan="Game.Plans.Plan3" IdentifiedPlayer="IdentifiedPlayer" OnCompleted="PlayerCompletedCityPlanAsync" />
                </div>
            </div>
        </div>
        <CascadingValue Value="SelectedNumberEffectPair">
            <TabControl>
                <TabContent>
                    <TabPage Title="@IdentifiedPlayer.Name">
                        @if (Game.CompletedAtUtc.HasValue || _showWaitingMessage)
                        {
                            <ReadOnlyPlayerSheet Player="IdentifiedPlayer" />
                        }
                        else
                        {
                            <PlayerSheet Player="IdentifiedPlayer" OnActionTaken="OnActionTakenAsync" OnFinalConfirmation="OnFinalConfirmAsync" @ref="_playerSheet" />
                        }
                    </TabPage>
                    @foreach (var player in Game.Players.Where(p => p.Name != IdentifiedPlayer.Name))
                    {
                        <TabPage Title="@player.Name">
                            <ReadOnlyPlayerSheet Player="player" />
                        </TabPage>
                    }
                </TabContent>
            </TabControl>
        </CascadingValue>
    </CascadingValue>
}

@code {
    [Parameter]
    public string GameId { get; set; }

    public Game Game { get; private set; }
    public Player IdentifiedPlayer { get; set; }
    public NumberEffectPair SelectedNumberEffectPair { get; set; }
    private bool WaitingForOtherPlayers => !Game.CompletedAtUtc.HasValue && Game.CurrentTurn.PlayerNamesWithActionTaken.Contains(IdentifiedPlayer.Name);

    private PlayerSheet _playerSheet;

    private bool _urlWrong = false;
    private bool _showGameOverMessage = false;
    private bool _showWaitingMessage = false;

    protected override async Task OnInitializedAsync()
    {
        Game = await Http.GetAsync<Game>($"api/Game/Get?id={GameId}");
        if (Game == null)
        {
            _urlWrong = true;
        }
        else
        {
            IdentifiedPlayer = Game.Players.SingleOrDefault(x => x.Name == Storage.PlayerName);

            if (IdentifiedPlayer != null)
            {
                await ConfigureHubAsync();

                if (Game.CompletedAtUtc.HasValue)
                {
                    _showGameOverMessage = true;
                }
                else if (Game.CurrentTurn.PlayerNamesWithActionTaken.Contains(IdentifiedPlayer.Name))
                {
                    _showWaitingMessage = true;
                }
            }
        }
    }

    private async Task ConfigureHubAsync()
    {
        GameHub.RegisterHandler("UpdateGame", async () =>
        {
            Game = await Http.GetAsync<Game>($"api/Game/Get?id={GameId}");
            _showGameOverMessage = Game.CompletedAtUtc.HasValue;
            _showWaitingMessage = WaitingForOtherPlayers;
            StateHasChanged();
        });

        GameHub.RegisterHandler<string>("OtherPlayerActionTaken", playerName =>
        {
            Game.CurrentTurn.PlayerNamesWithActionTaken.Add(playerName);
            if (WaitingForOtherPlayers)
            {
                _showWaitingMessage = Game.Players.Select(x => x.Name).Except(Game.CurrentTurn.PlayerNamesWithActionTaken).Any();
                StateHasChanged();
            }
        });

        await GameHub.StartAsync();
        await GameHub.AddToGroupAsync(GameId);
    }

    private void SelectNumberEffectPair(DeckIndex index)
    {
        if (Game.CompletedAtUtc.HasValue)
        {
            _showGameOverMessage = true;
        }
        else if (WaitingForOtherPlayers)
        {
            _showWaitingMessage = true;
        }
        else
        {
            if (SelectedNumberEffectPair == null || SelectedNumberEffectPair.DeckIndex != index)
            {
                SelectedNumberEffectPair = Game.CurrentTurn.GetNumberEffectPairs().Single(x => x.DeckIndex == index);
            }
            else
            {
                SelectedNumberEffectPair = null;
            }

            _playerSheet.SelectedHouseChanged(null);
        }
    }

    private async Task OnActionTakenAsync()
    {
        SelectedNumberEffectPair = null;
        Game = await Http.PostAsync<Game>("api/Game/UpdatePlayerSheet", new { GameId = Game.Id, Player = JsonConvert.SerializeObject(IdentifiedPlayer) });
    }

    private async Task OnFinalConfirmAsync()
    {
        Game.CurrentTurn.PlayerNamesWithActionTaken.Add(IdentifiedPlayer.Name);
        await Http.PostAsync<Game>("api/Game/ActionConfirmed", new { GameId = Game.Id, PlayerName = IdentifiedPlayer.Name });
        await GameHub.OtherPlayerActionTakenAsync(GameId, IdentifiedPlayer.Name);
        if (!Game.Players.Select(x => x.Name).Except(Game.CurrentTurn.PlayerNamesWithActionTaken).Any())
        {
            Game = await Http.PostAsync<Game>("api/Game/NextTurn", GameId);
            _showGameOverMessage = Game.CompletedAtUtc.HasValue;
            await GameHub.UpdateGameAsync(GameId);
        }
        else
        {
            _showWaitingMessage = true;
        }

        StateHasChanged();
    }

    private async Task PlayerCompletedCityPlanAsync()
    {
        Game = await Http.PostAsync<Game>("api/Game/UpdatePlayerSheet", new { GameId = Game.Id, Player = JsonConvert.SerializeObject(IdentifiedPlayer) });
        StateHasChanged();
    }

    private string BlurredClass(DeckIndex index) => (SelectedNumberEffectPair == null || SelectedNumberEffectPair.DeckIndex == index) ? "" : "blurred";
}