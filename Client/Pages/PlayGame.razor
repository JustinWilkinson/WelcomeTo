@page "/PlayGame/{GameId}"

@inject IHttpService Http
@inject GameStorage Storage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject BlazorTimer Timer
@inject GameHubCommunicator GameHub

@if (Game == null)
{
    @if (_urlWrong)
    {
        <p>Sorry, it doesn't look like this is a valid game - please make sure your URL is correct and retry.</p>
    }
    else
    {
        <p><em>Loading...</em></p>
    }
}
else if (IdentifiedPlayer == null)
{
    <p>Sorry, it doesn't look like you're part of this game. <NavLink href="@($"WaitingRoom/{Guid.NewGuid().ToString()}")" Match="NavLinkMatch.All">Click here to host a new game</NavLink></p>
}
else
{
    <CascadingValue Value="Game.CurrentTurn">
        <div class="row mb-4 h-25 overflow-auto">
            <DeckWithDiscard Index="1" Deck="Game.GameDeck.Deck1" Discard="Game.GameDeck.Discard1" />
            <DeckWithDiscard Index="2" Deck="Game.GameDeck.Deck2" Discard="Game.GameDeck.Discard2" />
            <DeckWithDiscard Index="3" Deck="Game.GameDeck.Deck3" Discard="Game.GameDeck.Discard3" />
            <CityPlanCard CityPlan="Game.Plans.Plan1" />
            <CityPlanCard CityPlan="Game.Plans.Plan2" />
            <CityPlanCard CityPlan="Game.Plans.Plan3" />
        </div>
        <TabControl>
            @foreach (var player in Game.Players)
            {
                <TabPage Title="@player.Name">
                    <PlayerSheet Player="player" />
                </TabPage>
            }
        </TabControl>
    </CascadingValue>
}

@code {
    [Parameter]
    public string GameId { get; set; }

    public Game Game { get; private set; }
    public Player IdentifiedPlayer { get; set; }

    private bool _urlWrong = false;

    protected override async Task OnInitializedAsync()
    {
        Game = await Http.GetAsync<Game>($"api/Game/Get?id={GameId}");

        if (Game == null)
        {
            _urlWrong = true;
        }
        else
        {
            IdentifiedPlayer = Game.Players.SingleOrDefault(x => x.Name == Storage.PlayerName);

            if (IdentifiedPlayer != null)
            {
                await ConfigureHubAsync();
            }
        }
    }

    private async Task ConfigureHubAsync()
    {
        GameHub.RegisterHandler("UpdateGame", async () =>
        {
            Game = await Http.GetAsync<Game>($"api/Game/Get?id={GameId}");
            StateHasChanged();
        });

        await GameHub.StartAsync();
        await GameHub.AddToGroupAsync(GameId);
    }
}