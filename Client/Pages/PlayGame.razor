@page "/PlayGame/{GameId}"

@inject IHttpService Http
@inject GameStorage Storage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject BlazorTimer Timer
@inject GameHubCommunicator GameHub

@if (Game == null)
{
    @if (_urlWrong)
    {
        <p>Sorry, it doesn't look like this is a valid game - please make sure your URL is correct and retry.</p>
    }
    else
    {
        <p><em>Loading...</em></p>
    }
}
else if (IdentifiedPlayer == null)
{
    <p>Sorry, it doesn't look like you're part of this game. <NavLink href="@($"WaitingRoom/{Guid.NewGuid().ToString()}")" Match="NavLinkMatch.All">Click here to host a new game</NavLink></p>
}
else
{
    <Modal Show="_showWaitingMessage" Header="Waiting for next turn..." CanClose="false">
        Waiting for @string.Join(", ", Game.Players.Select(x => x.Name).Except(Game.CurrentTurn.PlayerNamesWithActionTaken)) to take their turn...
    </Modal>
    <CascadingValue Value="Game">
        <div class="row mb-4">
            <div class="col-12 col-md-8">
                <div class="row">
                    <div class="col border border-secondary p-0 mx-3 pointer @BlurredClass(DeckIndex.Option1)" title="Option 1" @onclick="() => SelectNumberEffectPair(DeckIndex.Option1)">
                        <DeckWithDiscard Index="1" Deck="Game.GameDeck.Deck1" Discard="Game.GameDeck.Discard1" />
                    </div>
                    <div class="col border border-secondary p-0 mx-3 pointer @BlurredClass(DeckIndex.Option2)" title="Option 2" @onclick="() => SelectNumberEffectPair(DeckIndex.Option2)">
                        <DeckWithDiscard Index="2" Deck="Game.GameDeck.Deck2" Discard="Game.GameDeck.Discard2" />
                    </div>
                    <div class="col border border-secondary p-0 mx-3 pointer @BlurredClass(DeckIndex.Option3)" title="Option 3" @onclick="() => SelectNumberEffectPair(DeckIndex.Option3)">
                        <DeckWithDiscard Index="3" Deck="Game.GameDeck.Deck3" Discard="Game.GameDeck.Discard3" />
                    </div>
                </div>
            </div>
            <div class="col-8 col-md-4 mx-auto mx=md-0 mt-2 mt-md-0">
                <div class="row h-100" title="City Plans">
                    <CityPlanCard CityPlan="Game.Plans.Plan1" />
                    <CityPlanCard CityPlan="Game.Plans.Plan2" />
                    <CityPlanCard CityPlan="Game.Plans.Plan3" />
                </div>
            </div>
        </div>
        <CascadingValue Value="SelectedNumberEffectPair">
            <TabControl>
                <TabContent>
                    <TabPage Title="@IdentifiedPlayer.Name">
                        <PlayerSheet Player="IdentifiedPlayer" OnActionTaken="IdentifiedPlayerActionTakenAsync" @ref="_playerSheet" />
                    </TabPage>
                    @foreach (var player in Game.Players.Where(p => p.Name != IdentifiedPlayer.Name))
                    {
                        <TabPage Title="@player.Name">
                            <ReadOnlyPlayerSheet Player="player" />
                        </TabPage>
                    }
                </TabContent>
            </TabControl>
        </CascadingValue>
    </CascadingValue>
}

@code {
    [Parameter]
    public string GameId { get; set; }

    public Game Game { get; private set; }
    public Player IdentifiedPlayer { get; set; }
    public NumberEffectPair SelectedNumberEffectPair { get; set; }

    private PlayerSheet _playerSheet;

    private bool _urlWrong = false;
    private bool _showWaitingMessage = false;

    protected override async Task OnInitializedAsync()
    {
        Game = await Http.GetAsync<Game>($"api/Game/Get?id={GameId}");

        if (Game == null)
        {
            _urlWrong = true;
        }
        else
        {
            IdentifiedPlayer = Game.Players.SingleOrDefault(x => x.Name == Storage.PlayerName);

            if (IdentifiedPlayer != null)
            {
                await ConfigureHubAsync();
            }
        }
    }

    private async Task ConfigureHubAsync()
    {
        GameHub.RegisterHandler("UpdateGameAsync", async () =>
        {
            Game = await Http.GetAsync<Game>($"api/Game/Get?id={GameId}");
            StateHasChanged();
        });

        GameHub.RegisterHandler<string>("OtherPlayerActionTakenAsync", playerName =>
        {
            Game.CurrentTurn.PlayerNamesWithActionTaken.Add(playerName);
            if (Game.CurrentTurn.PlayerNamesWithActionTaken.Contains(IdentifiedPlayer.Name))
            {
                _showWaitingMessage = Game.Players.Select(x => x.Name).Except(Game.CurrentTurn.PlayerNamesWithActionTaken).Any();
                StateHasChanged();
            }
        });

        await GameHub.StartAsync();
        await GameHub.AddToGroupAsync(GameId);
    }

    private void SelectNumberEffectPair(DeckIndex index)
    {
        if (SelectedNumberEffectPair == null || SelectedNumberEffectPair.DeckIndex != index)
        {
            SelectedNumberEffectPair = Game.CurrentTurn.GetNumberEffectPairs().Single(x => x.DeckIndex == index);
        }
        else
        {
            SelectedNumberEffectPair = null;
        }

        _playerSheet.SelectedHouseChanged(null);
    }

    private async Task IdentifiedPlayerActionTakenAsync()
    {
        SelectedNumberEffectPair = null;
        Game = await Http.GetAsync<Game>($"api/Game/Get?id={GameId}");

        if (!Game.Players.Select(x => x.Name).Except(Game.CurrentTurn.PlayerNamesWithActionTaken).Any())
        {
            await Http.PostAsync("NextTurn", GameId);
            await Task.WhenAll(Http.GetAsync<Game>($"api/Game/Get?id={GameId}"), GameHub.UpdateGameAsync(GameId));
        }
        else
        {
            _showWaitingMessage = true;
        }

        StateHasChanged();
    }

    private string BlurredClass(DeckIndex index)
    {
        return (SelectedNumberEffectPair == null || SelectedNumberEffectPair.DeckIndex == index) ? "" : "blurred";
    }
}