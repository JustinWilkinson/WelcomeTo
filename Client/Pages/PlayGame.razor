@page "/PlayGame/{GameId}"

@inject IHttpService Http
@inject GameStorage Storage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject BlazorTimer Timer
@inject GameHubCommunicator GameHub

@if (Game == null)
{
    @if (_urlWrong)
    {
        <p>Sorry, it doesn't look like this is a valid game - please make sure your URL is correct and retry.</p>
    }
    else
    {
        <p><em>Loading...</em></p>
    }
}
else
{
<div class="row mb-4" style="height: 25vh;">
    <DeckWithDiscard Index="1" Deck="Game.GameDeck.Deck1" Discard="Game.GameDeck.Discard1"/>
    <DeckWithDiscard Index="2" Deck="Game.GameDeck.Deck2" Discard="Game.GameDeck.Discard2" />
    <DeckWithDiscard Index="3" Deck="Game.GameDeck.Deck3" Discard="Game.GameDeck.Discard3" />
    <CardTemplate>
        @Game.Plans.Plan1.Type
    </CardTemplate>
    <CardTemplate>
        @Game.Plans.Plan2.Type
    </CardTemplate>
    <CardTemplate>
        @Game.Plans.Plan3.Type
    </CardTemplate>
</div>
    <TabControl>
        @foreach (var player in Game.Players)
        {
            <TabPage Title="@player.Name">
                <PlayerSheet Player="player" />
            </TabPage>
        }
    </TabControl>
}

@code {
    public Player IdentifiedPlayer { get; set; }
    public Game Game { get; private set; }

    private bool _urlWrong = false;


    [Parameter]
    public string GameId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Game = await Http.GetAsync<Game>($"api/Game/Get?id={GameId}");

        if (Game == null)
        {
            _urlWrong = true;
        }
        else
        {
            await ConfigureHubAsync();
        }
    }

    private async Task ConfigureHubAsync()
    {
        GameHub.RegisterHandler("UpdateGame", async () =>
        {
            Game = await Http.GetAsync<Game>($"api/Game/Get?id={GameId}");
            StateHasChanged();
        });

        await GameHub.StartAsync();
        await GameHub.AddToGroupAsync(GameId);
    }
}