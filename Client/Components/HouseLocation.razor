<div class="col-1 @GetHouseClass()" @onclick="e => OnFenceSelected(e)">
    <div class="card h-100 bg-transparent border-0" onclick="event.stopPropagation();">
        <div class="card-header pt-1 pb-0 pl-2 pr-2 text-center bg-transparent border-0">
            <div class="garden">
                @if (House.Pool == PoolType.Built || House.Pool == PoolType.Unbuilt && SelectedNumberEffectPair?.Effect == CardType.Pool && IsSelectedHouse)
                {
                    <div class="bg-primary rounded w-75 h-100 float-right"></div>
                }
                else if (House.Pool == PoolType.Unbuilt)
                {
                    <div class="bg-secondary rounded w-75 h-100 float-right"></div>
                }
            </div>
        </div>
        <div class="card-body w-100 p-2">
            <div class="d-flex h-100 justify-content-center bg-light">
                <div class="align-self-center text-center w-100">
                    @if (House.Number.HasValue)
                    {
                        <h3 class="pt-1 mb-0 font-weight-bold bubblegum-font">@(House.IsBis ? $"{House.Number} Bis" : House.Number.ToString())</h3>
                    }
                    else
                    {
                        var possibleHouseNumbers = Street.GetPossibileNumbersForUnbuiltHouse(House, SelectedNumberEffectPair);
                        if (IsSelectedHouse)
                        {
                            <select class="form-control py-0 rounded-0 centered-select" @onchange="OnHouseSelected">
                                <option value="-1">Select</option>
                                @foreach (var possibility in possibleHouseNumbers)
                                {
                                    if (possibility == PlayerSheet.SelectedHouse.Number)
                                    {
                                        <option value="@possibility" selected>@possibility</option>
                                    }
                                    else
                                    {
                                        <option value="@possibility">@possibility</option>
                                    }
                                }
                            </select>
                        }
                        else if (PlayerSheet.SelectedHouse == null && possibleHouseNumbers.HasContent())
                        {
                            <select class="form-control py-0 rounded-0 centered-select" @onchange="OnHouseSelected">
                                <option value="0" selected>Select</option>
                                @foreach (var possibility in possibleHouseNumbers)
                                {
                                    <option value="@possibility">@possibility</option>
                                }
                            </select>
                        }
                        else
                        {
                            var possibleBisNumbers = PlayerSheet.SelectedHouse != null && SelectedNumberEffectPair?.Effect == CardType.Bis ? Street.GetPossibleBisNumbersForUnbuiltHouse(House, PlayerSheet.SelectedHouse) : null;
                            if (possibleBisNumbers.HasContent())
                            {
                                if (PlayerSheet.SelectedBisHouse != null && PlayerSheet.SelectedBisHouse.Street == Street.Position && PlayerSheet.SelectedBisHouse.Index == House.Index)
                                {
                                    <select class="form-control py-0 rounded-0 centered-select" @onchange="OnBisHouseSelected">
                                        <option value="0">Select</option>
                                        @foreach (var possibility in possibleBisNumbers)
                                        {
                                            if (possibility == PlayerSheet.SelectedBisHouse.Number)
                                            {
                                                <option value="@possibility" selected>@possibility Bis</option>
                                            }
                                            else
                                            {
                                                <option value="@possibility">@possibility Bis</option>
                                            }
                                        }
                                    </select>
                                }
                                else if (PlayerSheet.SelectedBisHouse == null)
                                {
                                    <select class="form-control py-0 rounded-0 centered-select" @onchange="OnBisHouseSelected">
                                        <option value="0" selected>Select</option>
                                        @foreach (var possibility in possibleBisNumbers)
                                        {
                                            <option value="@possibility">@possibility Bis</option>
                                        }
                                    </select>
                                }
                            }
                            else
                            {
                                <input type="number" min="0" max="15" class="form-control text-center" disabled />
                            }
                        }
                    }

                </div>
            </div>
        </div>
        <div class="card-footer p-0 text-center bg-transparent border-0">
            <img src="/images/@(House.Number.HasValue ? "house" : "house-outline").png" class="house-image" draggable="false" />
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    public PlayerSheet PlayerSheet { get; set; }

    [CascadingParameter]
    public NumberEffectPair SelectedNumberEffectPair { get; set; }

    [Parameter]
    public Street Street { get; set; }

    [Parameter]
    public House House { get; set; }

    private bool OnSelectedStreet => PlayerSheet.SelectedHouse != null && PlayerSheet.SelectedHouse.Street == Street.Position;
    private bool IsSelectedHouse => OnSelectedStreet && PlayerSheet.SelectedHouse.Index == House.Index;

    private string GetHouseClass()
    {
        var houseClass = "house";

        if (House.Index == 0)
        {
            houseClass += " house-first";
        }
        if (House.FenceBuilt || (OnSelectedStreet && PlayerSheet.SelectedFenceHouse?.Index == House.Index))
        {
            houseClass += " house-fenced";
        }
        if (CanBuildFence())
        {
            houseClass += " pointer";
        }
        if (House.InFinalEstate)
        {
            houseClass += " house-in-final-estate";
        }

        return houseClass;
    }

    private bool CanBuildFence()
    {
        if (!House.FenceBuilt && OnSelectedStreet && SelectedNumberEffectPair?.Effect == CardType.Fence && !House.InFinalEstate)
        {
            var houseToTheRight = Street.Houses.SingleOrDefault(x => x.Index == House.Index + 1);
            if (houseToTheRight == null || !houseToTheRight.Number.HasValue || houseToTheRight.Number != House.Number)
            {
                return true;
            }
        }

        return false;
    }

    private void OnHouseSelected(ChangeEventArgs e)
    {
        if (SelectedNumberEffectPair != null)
        {
            var selectedNumber = Convert.ToInt32(e.Value);
            var selectedHouse = selectedNumber >= 0 ? new SelectedHouse { Street = Street.Position, Index = House.Index, Number = selectedNumber } : null;
            PlayerSheet.SelectedHouseChanged(selectedHouse);
        }
    }

    private void OnBisHouseSelected(ChangeEventArgs e)
    {
        if (SelectedNumberEffectPair?.Effect == CardType.Bis)
        {
            var selectedNumber = Convert.ToInt32(e.Value);
            var selectedHouse = selectedNumber >= 0 ? new SelectedHouse { Street = Street.Position, Index = House.Index, Number = selectedNumber } : null;
            PlayerSheet.SelectedBisHouseChanged(selectedHouse);
        }
    }

    private void OnFenceSelected(MouseEventArgs e)
    {
        if (CanBuildFence())
        {
            var oldSelection = PlayerSheet.SelectedFenceHouse;
            var newSelection = oldSelection != null && oldSelection.Street == Street.Position && oldSelection.Index == House.Index ? null : new SelectedHouse { Street = Street.Position, Index = House.Index };
            PlayerSheet.SelectedFenceChanged(newSelection);
        }
    }
}