@inject IHttpService Http 

<CascadingValue Value="this">
    <div class="container-fluid grass-background p-2">
        <TabControl>
            <ExtraTabHeaderContent>
                @if (SelectedHouse != null)
                {
                    <button class="btn btn-primary ml-auto" @onclick="UpdatePlayerSheetAsync">Confirm Action</button>
                }
                else
                {
                    <button class="btn btn-primary ml-auto" disabled>Confirm Action</button>
                }
            </ExtraTabHeaderContent>
            <TabContent>
                <TabPage Title="Board">
                    <PlayerBoard Board="Player.Board" />
                </TabPage>
                <TabPage Title="Score Sheet">
                    <PlayerScoreSheet ScoreSheet="Player.ScoreSheet" />
                </TabPage>
            </TabContent>
        </TabControl>
    </div>
</CascadingValue>

@code{
    [CascadingParameter]
    public Game Game { get; set; }

    [CascadingParameter]
    public NumberEffectPair SelectedNumberEffectPair { get; set; }

    [Parameter]
    public Player Player { get; set; }

    [Parameter]
    public Action OnActionTaken { get; set; }

    public SelectedHouse SelectedHouse { get; set; }
    public SelectedHouse SelectedBisHouse { get; set; }
    public Park SelectedPark { get; set; }

    public void SelectedHouseChanged(SelectedHouse house)
    {
        SelectedHouse = house;
        SelectedBisHouseChanged(null);
    }

    public void SelectedBisHouseChanged(SelectedHouse house)
    {
        SelectedBisHouse = house;
        StateHasChanged();
    }

    public void SelectedParkChanged(Park park)
    {
        SelectedPark = park;
        StateHasChanged();
    }

    private async Task UpdatePlayerSheetAsync()
    {
        if (SelectedHouse != null)
        {
            var street = Player.Board.GetStreet(SelectedHouse.Street);
            street.Houses[SelectedHouse.Index].Number = SelectedHouse.Number;

            if (SelectedBisHouse != null)
            {
                var bisHouse = Player.Board.GetStreet(SelectedBisHouse.Street).Houses[SelectedBisHouse.Index];
                bisHouse.Number = SelectedBisHouse.Number;
                bisHouse.IsBis = true;
                Player.ScoreSheet.BisPoints.First(x => !x.IsCovered).IsCovered = true;
            }
            else if (SelectedPark != null)
            {
                street.Parks.Single(x => x.Points == SelectedPark.Points).IsCovered = true;
                switch (street.Position)
                {
                    case StreetPosition.Top:
                        Player.ScoreSheet.TopParks += SelectedPark.Points;
                        break;
                    case StreetPosition.Middle:
                        Player.ScoreSheet.MiddleParks += SelectedPark.Points;
                        break;
                    case StreetPosition.Bottom:
                        Player.ScoreSheet.BottomParks += SelectedPark.Points;
                        break;
                }
            }
            else if (SelectedNumberEffectPair.Effect == CardType.TempAgency)
            {
                Player.ScoreSheet.TempAgenciesUsed++;
            }

            await Http.PostAsync("api/Game/UpdatePlayerSheet", new { GameId = Game.Id, Player = Player });
            SelectedHouseChanged(null);
            OnActionTaken?.Invoke();
        }
    }
}