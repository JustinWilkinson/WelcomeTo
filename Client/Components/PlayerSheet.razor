<CascadingValue Value="this">
    <div class="container-fluid grass-background p-2">
        <TabControl>
            <ExtraTabHeaderContent>
                @if (SelectedHouse != null)
                {
                    <button class="btn btn-primary ml-auto" @onclick="UpdatePlayerSheetAsync">Confirm Action</button>
                }
                else
                {
                    <button class="btn btn-primary ml-auto" disabled>Confirm Action</button>
                }
            </ExtraTabHeaderContent>
            <TabContent>
                <TabPage Title="Board">
                    <PlayerBoard Board="Player.Board" />
                </TabPage>
                <TabPage Title="Score Sheet">
                    <PlayerScoreSheet ScoreSheet="Player.ScoreSheet" />
                </TabPage>
            </TabContent>
        </TabControl>
    </div>
</CascadingValue>

@code{
    [CascadingParameter]
    public Game Game { get; set; }

    [CascadingParameter]
    public NumberEffectPair SelectedNumberEffectPair { get; set; }

    [Parameter]
    public Player Player { get; set; }

    [Parameter]
    public EventCallback OnActionTaken { get; set; }

    public SelectedHouse SelectedHouse { get; set; }
    public SelectedHouse SelectedBisHouse { get; set; }
    public SelectedHouse SelectedFenceHouse { get; set; }
    public Park SelectedPark { get; set; }
    public SelectedRealEstateValue SelectedRealEstateValue { get; set; }

    public void SelectedHouseChanged(SelectedHouse house)
    {
        SelectedHouse = house;
        SelectedParkChanged(null, false);
        SelectedFenceChanged(null, false);
        SelectedBisHouseChanged(null, false);

        if (house == null)
        {
            SelectedRealEstateValueChanged(null, false);
        }

        StateHasChanged();
    }

    public void SelectedBisHouseChanged(SelectedHouse house, bool runStateHasChanged = true)
    {
        SelectedBisHouse = house;
        if (runStateHasChanged)
        {
            StateHasChanged();
        }
    }

    public void SelectedParkChanged(Park park, bool runStateHasChanged = true)
    {
        SelectedPark = park;
        if (runStateHasChanged)
        {
            StateHasChanged();
        }
    }

    public void SelectedFenceChanged(SelectedHouse fencedHouse, bool runStateHasChanged = true)
    {
        SelectedFenceHouse = fencedHouse;
        if (runStateHasChanged)
        {
            StateHasChanged();
        }
    }

    public void SelectedRealEstateValueChanged(SelectedRealEstateValue realEstateValue, bool runStateHasChanged = true)
    {
        SelectedRealEstateValue = realEstateValue;
        if (runStateHasChanged)
        {
            StateHasChanged();
        }
    }

    private async Task UpdatePlayerSheetAsync()
    {
        if (SelectedHouse != null)
        {
            Player.ProcessAction(SelectedNumberEffectPair, SelectedHouse, SelectedBisHouse, SelectedFenceHouse, SelectedPark, SelectedRealEstateValue);
            SelectedHouseChanged(null);
            await OnActionTaken.InvokeAsync(null);
        }
    }
}