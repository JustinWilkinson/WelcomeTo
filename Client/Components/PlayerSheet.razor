@inject IHttpService Http 

<CascadingValue Value="this">
    <div class="container-fluid grass-background p-2">
        <TabControl>
            <ExtraTabHeaderContent>
                @if (SelectedHouse != null)
                {
                    <button class="btn btn-primary ml-auto" @onclick="UpdatePlayerSheetAsync">Confirm Action</button>
                }
                else
                {
                    <button class="btn btn-primary ml-auto" disabled>Confirm Action</button>
                }
            </ExtraTabHeaderContent>
            <TabContent>
                <TabPage Title="Board">
                    <PlayerBoard Board="Player.Board" />
                </TabPage>
                <TabPage Title="Score Sheet">
                    <PlayerScoreSheet ScoreSheet="Player.ScoreSheet" />
                </TabPage>
            </TabContent>
        </TabControl>
    </div>
</CascadingValue>

@code{
    [CascadingParameter]
    public Game Game { get; set; }

    [CascadingParameter]
    public NumberEffectPair SelectedNumberEffectPair { get; set; }

    [Parameter]
    public Player Player { get; set; }

    [Parameter]
    public EventCallback OnActionTaken { get; set; }

    public SelectedHouse SelectedHouse { get; set; }
    public SelectedHouse SelectedBisHouse { get; set; }
    public SelectedHouse SelectedFenceHouse { get; set; }
    public Park SelectedPark { get; set; }
    public SelectedRealEstateValue SelectedRealEstateValue { get; set; }

    public void SelectedHouseChanged(SelectedHouse house)
    {
        SelectedHouse = house;
        SelectedBisHouseChanged(null, false);
        SelectedParkChanged(null, false);
        SelectedFenceChanged(null, false);
        SelectedRealEstateValueChanged(null, false);
        StateHasChanged();
    }

    public void SelectedBisHouseChanged(SelectedHouse house, bool runStateHasChanged = true)
    {
        SelectedBisHouse = house;
        if (runStateHasChanged)
        {
            StateHasChanged();
        }
    }

    public void SelectedParkChanged(Park park, bool runStateHasChanged = true)
    {
        SelectedPark = park;
        if (runStateHasChanged)
        {
            StateHasChanged();
        }
    }

    public void SelectedFenceChanged(SelectedHouse fencedHouse, bool runStateHasChanged = true)
    {
        SelectedFenceHouse = fencedHouse;
        if (runStateHasChanged)
        {
            StateHasChanged();
        }
    }

    public void SelectedRealEstateValueChanged(SelectedRealEstateValue realEstateValue, bool runStateHasChanged = true)
    {
        SelectedRealEstateValue = realEstateValue;
        if (runStateHasChanged)
        {
            StateHasChanged();
        }
    }

    private async Task UpdatePlayerSheetAsync()
    {
        if (SelectedHouse != null)
        {
            var street = Player.Board.GetStreet(SelectedHouse.Street);
            var house = street.Houses[SelectedHouse.Index];
            house.Number = SelectedHouse.Number;

            if (SelectedNumberEffectPair.Effect == CardType.Bis && SelectedBisHouse != null)
            {
                var bisHouse = Player.Board.GetStreet(SelectedBisHouse.Street).Houses[SelectedBisHouse.Index];
                bisHouse.Number = SelectedBisHouse.Number;
                bisHouse.IsBis = true;
                Player.ScoreSheet.BisPoints.First(x => !x.IsCovered).IsCovered = true;
            }
            else if (SelectedNumberEffectPair.Effect == CardType.Park && SelectedPark != null)
            {
                street.Parks.Single(x => x.Points == SelectedPark.Points).IsCovered = true;
                switch (street.Position)
                {
                    case StreetPosition.Top:
                        Player.ScoreSheet.TopParks = street.Parks.First(x => !x.IsCovered).Points;
                        break;
                    case StreetPosition.Middle:
                        Player.ScoreSheet.MiddleParks = street.Parks.First(x => !x.IsCovered).Points;
                        break;
                    case StreetPosition.Bottom:
                        Player.ScoreSheet.BottomParks = street.Parks.First(x => !x.IsCovered).Points;
                        break;
                }
            }
            else if (SelectedNumberEffectPair.Effect == CardType.TempAgency)
            {
                Player.ScoreSheet.TempAgenciesUsed++;
            }
            else if (SelectedNumberEffectPair.Effect == CardType.Pool && house.Pool == PoolType.Unbuilt)
            {
                house.Pool = PoolType.Built;
                Player.ScoreSheet.PoolPoints.First(x => !x.IsCovered).IsCovered = true;
            }
            else if (SelectedNumberEffectPair.Effect == CardType.Fence && SelectedFenceHouse != null)
            {
                Player.Board.GetStreet(SelectedFenceHouse.Street).Houses[SelectedFenceHouse.Index].FenceBuilt = true;
            }
            else if (SelectedNumberEffectPair.Effect == CardType.RealEstateValue && SelectedRealEstateValue != null)
            {
                Player.ScoreSheet.RealEstateValuesTable[SelectedRealEstateValue.Size][SelectedRealEstateValue.Index].IsCovered = true;
            }

            await Http.PostAsync("api/Game/UpdatePlayerSheet", new { GameId = Game.Id, Player = JsonConvert.SerializeObject(Player) });
            SelectedHouseChanged(null);
            await OnActionTaken.InvokeAsync(null);
        }
    }
}