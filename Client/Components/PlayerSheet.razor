<CascadingValue Value="this">
    <div class="container-fluid grass-background p-2">
        <TabControl>
            <TabHeader>
                <div class="d-flex">
                    <TabHeaderTemplate />
                    @if (_requireReconfirm)
                    {
                        <div class="form-inline ml-auto">
                            <label class="col-form-label mr-1 text-white">You are able to claim a city plan!</label>
                            <button class="btn btn-primary ml-auto" @onclick="() => UpdatePlayerSheetAsync(true)">Reconfirm</button>
                        </div>
                    }
                    else if (Player.CanPerformAction(Game.CurrentTurn))
                    {
                        if (SelectedHouse != null)
                        {
                            <button class="btn btn-primary ml-auto" @onclick="() => UpdatePlayerSheetAsync()">Confirm Action</button>
                        }
                        else
                        {
                            <button class="btn btn-primary ml-auto" disabled>Confirm Action</button>
                        }
                    }
                    else
                    {
                        <div class="form-inline ml-auto">
                            <label class="col-form-label mr-1 text-white">You cannot perform any action this turn.</label>
                            <button class="form-control btn btn-primary" @onclick="() => UpdatePlayerSheetAsync()">Pass</button>
                        </div>
                    }
                </div>
            </TabHeader>
            <TabItems>
                <TabItem Title="Board">
                    <PlayerBoard Board="Player.Board" />
                </TabItem>
                <TabItem Title="Score Sheet">
                    <PlayerScoreSheet ScoreSheet="Player.ScoreSheet" />
                </TabItem>
            </TabItems>
        </TabControl>
    </div>
</CascadingValue>

@code{
    [CascadingParameter]
    public Game Game { get; set; }

    [CascadingParameter]
    public NumberEffectPair SelectedNumberEffectPair { get; set; }

    [Parameter]
    public Player Player { get; set; }

    [Parameter]
    public EventCallback OnActionTaken { get; set; }

    [Parameter]
    public EventCallback OnFinalConfirmation { get; set; }

    public SelectedHouse SelectedHouse { get; set; }
    public SelectedHouse SelectedBisHouse { get; set; }
    public SelectedHouse SelectedFenceHouse { get; set; }
    public Park SelectedPark { get; set; }
    public SelectedRealEstateValue SelectedRealEstateValue { get; set; }

    private bool _requireReconfirm = false;

    public void SelectedHouseChanged(SelectedHouse house, bool runStateHasChanged = true)
    {
        SelectedHouse = house;
        SelectedFenceChanged(null, false);
        SelectedBisHouseChanged(null, false);

        if (house == null)
        {
            SelectedRealEstateValueChanged(null, false);
        }
        else if (SelectedNumberEffectPair?.Effect == CardType.Park)
        {
            var uncoveredParksOnStreet = Player.Board.GetStreet(SelectedHouse.Street).Parks.Where(x => !x.IsCovered).ToArray();
            var points = uncoveredParksOnStreet.Length > 1 ? uncoveredParksOnStreet[0].Points : new int?();
            if (points.HasValue)
            {
                SelectedPark = new Park { Points = points.Value };
            }
        }

        RunStateHasChanged(runStateHasChanged);
    }

    public void SelectedBisHouseChanged(SelectedHouse house, bool runStateHasChanged = true)
    {
        SelectedBisHouse = house;
        RunStateHasChanged(runStateHasChanged);
    }

    public void SelectedFenceChanged(SelectedHouse fencedHouse, bool runStateHasChanged = true)
    {
        SelectedFenceHouse = fencedHouse;
        RunStateHasChanged(runStateHasChanged);
    }

    public void SelectedRealEstateValueChanged(SelectedRealEstateValue realEstateValue, bool runStateHasChanged = true)
    {
        SelectedRealEstateValue = realEstateValue;
        RunStateHasChanged(runStateHasChanged);
    }

    private async Task UpdatePlayerSheetAsync(bool isReconfirm = false)
    {
        if (!isReconfirm)
        {
            if (SelectedHouse != null)
            {
                Player.ProcessAction(SelectedNumberEffectPair, SelectedHouse, SelectedBisHouse, SelectedFenceHouse, SelectedPark, SelectedRealEstateValue);
                SelectedHouseChanged(null, false);
            }
            else
            {
                Player.PassTurn();
            }

            await OnActionTaken.InvokeAsync(null);
        }

        CheckForReconfirmRequired();
        if (isReconfirm || !_requireReconfirm)
        {
            await OnFinalConfirmation.InvokeAsync(null);
            _requireReconfirm = false;
        }
    }

    private void CheckForReconfirmRequired()
    {
        foreach (PlanType type in Enum.GetValues(typeof(PlanType)))
        {
            if (Player.ScoreSheet.GetCityPlanPoints(type) == 0 && !Game.Plans[type].EstateSizes.Without(Player.Board.GetEstates(false).Select(x => x.HouseIndices.Count)).Any())
            {
                _requireReconfirm = true;
            }
        }
    }

    private void RunStateHasChanged(bool run)
    {
        if (run)
        {
            StateHasChanged();
        }
    }
}