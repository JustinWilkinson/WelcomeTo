<div class="col">
    <div class="card border-rounded card-background h-100@(_canBeCompletedByIdentifiedPlayer ? " glow pointer" : "")">
        <div class="card-header">
            <div class="float-left text-center">
                <img class="house-image" src="/images/house.png" draggable="false" />
            </div>
            <div class="float-right text-center text-danger">
                @CityPlan.Type
            </div>
        </div>
        <div class="card-body py-2 px-1">
            <div class="d-flex h-100 justify-content-center">
                <div class="align-self-center">
                    <div class="text-center mb-2 small">
                        @foreach (var size in _topRow)
                        {
                            <div class="d-inline-block p-1 border border-dark">
                                @for (var i = 0; i < size; i++)
                                {
                                    <span class="oi oi-home"></span>
                                }
                                <strong class="bubblegum-font">@size</strong>
                            </div>
                        }
                    </div>
                    <div class="text-center small">
                        @foreach (var size in _bottomRow)
                        {
                            <div class="d-inline-block p-1 border border-dark">
                                @for (var i = 0; i < size; i++)
                                {
                                    <span class="oi oi-home"></span>
                                }
                                <strong class="bubblegum-font">@size</strong>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="card-footer">
            <div class="float-left text-center">
                <div class="rounded-circle bg-dark text-warning pl-2 pr-2">
                    @if (_completedByAnyPlayer)
                    {
                        <span class="oi oi-circle-x"></span>
                    }
                    else
                    {
                        <span>@CityPlan.FirstPoints</span>
                    }
                </div>
            </div>
            <div class="float-right text-center">
                <div class="rounded-circle bg-warning text-dark pl-2 pr-2">
                    @CityPlan.BasicPoints
                </div>
            </div>
        </div>
    </div>
</div>

@code{
    [CascadingParameter]
    public Game Game { get; set; }

    [Parameter]
    public CityPlan CityPlan { get; set; }

    [Parameter]
    public Player IdentifiedPlayer { get; set; }

    private List<int> _topRow = new List<int>();
    private List<int> _bottomRow = new List<int>();
    private bool _completedByAnyPlayer;
    private bool _canBeCompletedByIdentifiedPlayer;

    protected override void OnInitialized()
    {
        var halfSize = CityPlan.EstateSizes.Sum() / 2;
        var topRowSum = 0;
        for (var i = 0; i < CityPlan.EstateSizes.Count; i++)
        {
            var size = CityPlan.EstateSizes[i];
            topRowSum += size;

            if (i == 0 || topRowSum <= halfSize || topRowSum < CityPlan.EstateSizes.Skip(_topRow.Count).Sum())
            {
                _topRow.Add(size);
            }
            else
            {
                break;
            }
        }

        _bottomRow.AddRange(CityPlan.EstateSizes.Skip(_topRow.Count));
    }

    protected override void OnParametersSet()
    {
        _completedByAnyPlayer = Game.Players.Any(p => p.ScoreSheet.GetCityPlanPoints(CityPlan.Type) == CityPlan.FirstPoints);
        _canBeCompletedByIdentifiedPlayer = IdentifiedPlayer.ScoreSheet.GetCityPlanPoints(CityPlan.Type) == 0 && !CityPlan.EstateSizes.Except(IdentifiedPlayer.Board.GetNonFinalEstates().Select(x => x.HouseIndices.Count)).Any();
    }
}